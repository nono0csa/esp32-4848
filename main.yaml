packages:
  loading_page: !include common/widgets/loading.yaml
  home: !include widgets/home/home.yaml
  light: !include widgets/light/config.yaml
  devices: !include common/widgets/devices.yaml
  climate: !include widgets/climate/climate.yaml
  media_player: !include widgets/media_player/media_player.yaml
  vacuum: !include widgets/vacuum/vacuum.yaml


substitutions: !include common/substitutions.yaml
image: !include common/image.yaml
font: !include common/fonts.yaml
color: !include common/colors.yaml


http_request:
  verify_ssl: false

external_components:
  - source: github://alaltitov/esphome@main
    components: [i18n]

i18n:
  id: i18n_translations
  sources:
    - translations/en.yaml
    - translations/fr.yaml
  default_locale: fr

esphome:
  name: ${display_name}
  friendly_name: ${display_friendly_name}
  includes:
    - <sstream>
    - <algorithm>
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
    - priority: 400
      then:
        - lambda: |-
            id(i18n_translations).set_current_locale(id(current_language));
        - script.execute: update_loading_page
    - priority: -100
      then:
        - lvgl.roller.update:
            id: backlight_settings_sleep_time_roller
            selected_index: !lambda return id(display_timeout);
        - lambda: |-
            ESP_LOGI("TEST", "Current locale i18n: %s", id(i18n_translations).get_current_locale().c_str());
            ESP_LOGI("TEST", "Current locale global: %s", id(current_language).c_str());
            ESP_LOGI("TEST", "Current DT global: %d", id(display_timeout));
        - delay: 5s
        - script.execute: test_timezone
        - lambda: |-
            ESP_LOGW("TEST", "OUR GLOBAL ON BOOT: %s", id(display_lock) ? "true" : "false");
            ESP_LOGW("TEST", "Current locale i18n: %s", id(i18n_translations).get_current_locale().c_str());
            ESP_LOGW("TEST", "Current locale global: %s", id(current_language).c_str());
            ESP_LOGI("TEST", "Current DT global: %d", id(display_timeout));
esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      # CONFIG_SPIRAM_TRY_ALLOCATE_WIFI_LWIP: y
      # CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      # CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y
      # CONFIG_FREERTOS_USE_TRACE_FACILITY: "y"
      # CONFIG_FREERTOS_USE_STATS_FORMATTING_FUNCTIONS: "y"

psram:
  mode: octal
  speed: 80MHz


logger:
  level: debug


api:
  encryption:
    key: !secret display_key

ota:
  - platform: esphome
    id: ota_state
    password: !secret display_ota
    on_begin: 
      - logger.log: "OTA Start"
      - light.turn_on: display_backlight
      - lambda: "id(display_backlight).loop();"
      - lvgl.resume:
      - lvgl.widget.redraw:
      - lvgl.label.update:
          id: ota_label_primary
          text: !lambda |-
            return id(i18n_translations).translate("ota.start.primary");
      - lvgl.label.update:
          id: ota_label_secondary
          text: !lambda |-
            return id(i18n_translations).translate("ota.start.secondary");
      - lvgl.widget.show: ota_widget
      - lvgl.resume:
      - lvgl.widget.redraw:
      - lambda: "id(lvgl_component).loop();"
      - lambda: "id(lvgl_component).loop();"
      - logger.log: "OTA widget shown"

    on_progress: 
      - lvgl.bar.update:
          id: ota_bar_value
          value: !lambda return (int)x;
      - lvgl.label.update:
          id: ota_label_primary
          text: " "
      - lvgl.label.update:
          id: ota_label_secondary
          text: !lambda |-
            static char buffer[64];
            snprintf(buffer, sizeof(buffer), id(i18n_translations).translate("ota.progress").c_str(), x);
            return buffer;
      - lambda: "id(lvgl_component).loop();"

    on_end:
      - logger.log: "OTA End"
      - lvgl.bar.update:
          id: ota_bar_value
          value: 100
      - lvgl.label.update:
          id: ota_label_primary
          text: !lambda |-
            return id(i18n_translations).translate("ota.end.primary");
      - lvgl.label.update:
          id: ota_label_secondary
          text: !lambda |-
            return id(i18n_translations).translate("ota.end.secondary");
      - lambda: |-
          id(lvgl_component).loop();

    on_error:
      - logger.log:
            format: "OTA update error %d"
            args: ["x"]
      - lvgl.label.update:
          id: ota_label_primary
          text: !lambda |-
            return id(i18n_translations).translate("ota.error.primary");
      - lvgl.label.update:
          id: ota_label_secondary
          text: !lambda |-
            return id(i18n_translations).translate("ota.error.secondary");
      - lambda: |-
          id(lvgl_component).loop();


wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
  on_connect:
    - lvgl.label.update:
        id: wifi_status
        text_color: color_green
  on_disconnect:
    - lvgl.label.update:
        id: wifi_status
        text_color: color_steel_blue


lvgl:
  id: lvgl_component
  color_depth: 16
  byte_order: big_endian
  displays: ${display_name}
  touchscreens:
    - touchscreen_id: touchscreen_id
      long_press_time: 5000ms
      long_press_repeat_time: 400ms
  page_wrap: false
  top_layer:
    widgets:
      - obj:
          id: ota_widget
          hidden: true
          width: 480
          height: 480
          align: center
          clickable: false
          bg_color: color_slate_blue_gray
          border_opa: transp
          shadow_opa: transp
          radius: 0
          widgets:
            - label:
                id: ota_label_primary
                y: -50
                align: center
                text_font: nunito_20
                text_color: color_misty_blue
                text: "Starting OTA!"
            - label:
                id: ota_label_secondary
                y: -20
                align: center
                text_font: nunito_18
                text_color: color_misty_blue
                text: "Wait..."
            - bar:
                id: ota_bar_value
                y: 20
                width: 300
                value: 0
                align: center
                min_value: 0
                max_value: 100
                animated: true
                bg_color: color_steel_blue
                indicator:
                  bg_color: color_misty_blue
  

light:
  # Backlight
  - platform: monochromatic
    output: backlight_output
    name: Backlight
    id: display_backlight
    restore_mode: ALWAYS_ON
    on_turn_on:
      - if:
          condition: lvgl.is_paused
          then:
            - logger.log: "LVGL resuming by backlight on"
            - lvgl.resume:
            - lvgl.widget.redraw:
    on_turn_off:
      - if:
          condition:
            lambda: 'return id(display_timeout_backlight).state >= 0;'
          then:
            - logger.log: "Backlight off, pausing LVGL"
            - lvgl.pause:

output:
    # Backlight LED
  - platform: ledc
    pin: GPIO38
    id: backlight_output
    frequency: 100Hz

i2c:
  - id: bus_a
    sda: GPIO19
    scl:
      number: GPIO45
      ignore_strapping_warning: true
    frequency: 100kHz


touchscreen:
  platform: gt911
  id: touchscreen_id
  transform:
    mirror_x: false
    mirror_y: false
  display: ${display_name}
  on_release:
      - if:
          condition: lvgl.is_paused
          then:
            - logger.log: "LVGL resuming"
            - lvgl.resume:
            - lvgl.widget.redraw:
            - light.turn_on: display_backlight

  # on_touch:
  #   - lambda: |-
  #         ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
  #             touch.x,
  #             touch.y,
  #             touch.x_raw,
  #             touch.y_raw
  #             );

spi:
  - id: lcd_spi
    clk_pin: GPIO48
    mosi_pin: GPIO47

# display:
#   - platform: mipi_rgb
#     id: ${display_name}
#     model: GUITION-4848S040
#     rotation: 180

display:
  - platform: st7701s
    id: ${display_name}
    update_interval: never
    auto_clear_enabled: false
    data_rate: 2MHz
    spi_mode: MODE3
    color_order: RGB
    invert_colors: false
    dimensions:
      width: 480
      height: 480
    transform:
      mirror_x: false
      mirror_y: false
    cs_pin: 39
      # reset not defined 
    de_pin: 18
    hsync_pin: 16
    vsync_pin: 17
    pclk_pin: 21
    init_sequence: 
      - 1
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x10] # CMD2_BKSEL_BK0
      - [0xCD, 0x00] # disable MDT flag
    pclk_frequency: 12MHz
    pclk_inverted: false
    data_pins:
      red:
        - 11         # R1
        - 12         # R2
        - 13         # R3
        - 14         # R4
        - 0          # R5
      green:
        - 8          # G0
        - 20         # G1
        - 3          # G2
        - 46         # G3
        - 9          # G4
        - 10         # G5 
      blue:
        - 4          # B1
        - 5          # B2
        - 6          # B3
        - 7          # B4
        - 15         # B5