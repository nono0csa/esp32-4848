substitutions: !include substitutions.yaml


globals:
  - id: repeat_modes
    type: std::vector<std::string>
    initial_value: '{"all", "one", "off"}'
  - id: repeat_icons
    type: std::vector<std::string>
    initial_value: '{"${repeat_all_icon}", "${repeat_one_icon}", "${repeat_off_icon}"}'
  - id: current_repeat_mode_idx
    type: int
    initial_value: '0'
  - id: tmp_repeat_mode
    type: std::string
    restore_value: no
    initial_value: '"all"'
  - id: tmp_repeat_icon
    type: std::string
    restore_value: no
    initial_value: '"${repeat_all_icon}"'
  - id: cover_url
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: duration_slider_user_interaction
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: slider_position
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: pending_cover_url
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: pending_repeat_value
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: source_list
    type: std::vector<std::string>
    restore_value: no
  - id: source_list_index
    type: int
    restore_value: no
    initial_value: '0'
  - id: source_available
    type: bool
    restore_value: no
    initial_value: 'false'


online_image:
  - url: "https://www.example.com/example.jpeg"
    format: JPEG
    type: RGB565
    resize: 120x120
    id: media_image_jpeg
    on_download_finished:
      - lvgl.obj.update:
          id: media_player_cover
          bg_image_src: media_image_jpeg


sensor:
  - platform: homeassistant
    id: media_player_volume_level_sensor
    entity_id: "${media_player_entity}"
    attribute: volume_level
    on_value:
      - lvgl.arc.update:
          id: media_player_volume_arc
          value: !lambda 'return int(x * 100);'

  - platform: homeassistant
    id: media_player_media_duration_sensor
    entity_id: "${media_player_entity}"
    attribute: media_duration
    on_value:
      - lambda: |-
          lv_slider_set_range(id(media_player_duration_pos_slider), 0, x);

  - platform: homeassistant
    id: media_player_media_position_sensor
    entity_id: "${media_player_entity}"
    attribute: media_position
    on_value: 
      - if:
          condition:
            lambda: 'return !id(duration_slider_user_interaction);'
          then:
            - lvgl.slider.update:
                id: media_player_duration_pos_slider
                value: !lambda return x;


binary_sensor:
  - platform: homeassistant
    id: media_player_is_volume_muted
    entity_id: "${media_player_entity}"
    attribute: is_volume_muted
    on_state:
      - if:
          condition:
            lambda: 'return x;'
          then:
            - lvgl.label.update:
                id: media_player_mute_label
                text: "${volume_off_icon}"
          else:
            - lvgl.label.update:
                id: media_player_mute_label
                text: "${volume_on_icon}"


text_sensor:

  - platform: homeassistant
    id: media_player_state_sensor
    entity_id: "${media_player_entity}"
    on_value:
      - if:
          condition:
            lambda: 'return x == "paused";'
          then:
            - lvgl.label.update: 
                id: media_player_state_label
                x: 0
                text: "${play_icon}"
          else:
            - lvgl.label.update: 
                id: media_player_state_label
                x: 0
                text: "${pause_icon}"

  - platform: homeassistant
    id: media_player_cover_sensor
    entity_id: "${media_player_entity}"
    attribute: entity_picture
    on_value:
      - lambda: |-
          id(pending_cover_url) = x;
      - script.execute: update_cover_script

  - platform: homeassistant
    id: media_player_friendly_name_sensor
    entity_id: "${media_player_entity}"
    attribute: friendly_name
    on_value:
      - lvgl.label.update:
          id: media_player_name_label
          text: !lambda return x;

  - platform: homeassistant
    id: media_player_title_sensor
    entity_id: "${media_player_entity}"
    attribute: media_title
    on_value:
      - delay: 1s
      - lvgl.label.update:
          id: media_player_title_label
          text: !lambda return x;

  - platform: homeassistant
    id: media_player_artist_sensor
    entity_id: "${media_player_entity}"
    attribute: media_artist
    on_value:
      - delay: 1s
      - lvgl.label.update:
          id: media_player_artist_label
          text: !lambda return x;

  - platform: homeassistant
    id: media_player_repeat_sensor
    entity_id: "${media_player_entity}"
    attribute: repeat
    on_value:
      - lambda: |-
          id(pending_repeat_value) = x;
      - script.execute: update_repeat_mode_script

  # MEDIA PLAYER SOURCE LIST
  - platform: homeassistant
    id: media_player_source_list_sensor
    entity_id: "${media_player_entity}"
    attribute: source_list
    on_value:
      - lambda: |-
          std::vector<std::string> sl;
          std::string input = x;
          bool has_sources = false;
          
          if (!input.empty() && input != "unknown" && input != "unavailable") {
            input.erase(std::remove(input.begin(), input.end(), '['), input.end());
            input.erase(std::remove(input.begin(), input.end(), ']'), input.end());
            input.erase(std::remove(input.begin(), input.end(), '\''), input.end());
            input.erase(std::remove(input.begin(), input.end(), '"'), input.end());
            std::stringstream ss(input);
            std::string item;
            while (std::getline(ss, item, ',')) {
              item.erase(0, item.find_first_not_of(" \t"));
              if (!item.empty())
                item.erase(item.find_last_not_of(" \t") + 1);
              if (!item.empty()) sl.push_back(item);
            }
            has_sources = !sl.empty();
          }
          
          id(source_list) = sl;
          id(source_available) = has_sources;
          
          int sel = id(source_list_index);
          if (sel < 0 || sel >= (int)sl.size()) sel = 0;
          id(source_list_index) = sel;
          
          ESP_LOGI("MP_PANEL","Parsed %d sources (sel=%d, available=%d)", (int)sl.size(), sel, has_sources);
          
          // Обновляем состояние кнопки
          lv_obj_t* btn = id(media_player_source_btn);
          lv_obj_t* label = id(media_player_source_label);
          
          if (has_sources) {
            lv_obj_clear_state(btn, LV_STATE_DISABLED);
            lv_obj_set_style_opa(btn, LV_OPA_COVER, 0);
            lv_obj_set_style_text_opa(label, LV_OPA_COVER, 0);
            id(media_player_build_source_panel).execute();
          } else {
            lv_obj_add_state(btn, LV_STATE_DISABLED);
            lv_obj_set_style_opa(btn, LV_OPA_30, 0);
            lv_obj_set_style_text_opa(label, LV_OPA_30, 0);
          }


  # MEDIA PLAYER SOURCE
  - platform: homeassistant
    id: media_player_source_sensor
    entity_id: "${media_player_entity}"
    attribute: source
    on_value:
      - lambda: |-
          if (!id(source_list).empty() && !x.empty()) {
            for (int i = 0; i < (int)id(source_list).size(); ++i) {
              if (id(source_list)[i] == x) {
                id(source_list_index) = i;
                ESP_LOGD("MP_PANEL","Sync source -> index %d (%s)", i, x.c_str());
                break;
              }
            }
          }


lvgl:

  pages:
    - id: media_player_page
      bg_color: color_black
      scrollable: false
      widgets:
        - label:
            id: media_player_name_label
            y: 15
            align: top_mid
            text_font: nunito_20
            text_color: color_misty_blue
            text: "My Media Player"
        - obj:
            y: 60
            width: 440
            height: 160
            align: top_mid
            clickable: false
            scrollable: false
            radius: 20
            pad_all: 0
            bg_color: color_slate_blue_gray
            border_opa: transp
            border_width: 0
            shadow_opa: transp
            widgets:
              - obj:
                  id: media_widget_background
                  hidden: false
                  width: 440
                  height: 160
                  align: top_mid
                  clickable: false
                  scrollable: false
                  radius: 20
                  pad_all: 0
                  bg_color: color_slate_blue_gray
                  border_opa: transp
                  border_width: 0
                  shadow_opa: transp
                  widgets:
                    # Cover
                    - obj:
                        id: media_player_cover
                        width: 140
                        height: 140
                        align: left_mid
                        bg_opa: transp
                        bg_image_src: media_image_jpeg
                        border_opa: transp
                        shadow_opa: transp
                        radius: 0

                    # Title/Artist/Duration
                    - obj:
                        width: 300
                        height: 120
                        align: right_mid
                        bg_color: color_steel_blue
                        bg_opa: transp
                        border_opa: transp
                        border_width: 0
                        shadow_opa: transp
                        radius: 10
                        widgets:
                          - label:
                              id: media_player_title_label
                              height: 40
                              width: 260
                              long_mode: DOT
                              y: -25
                              align: CENTER
                              text_color: color_misty_blue
                              text_font: nunito_20
                              text: "Title"
                          - label:
                              id: media_player_artist_label
                              height: 30
                              width: 260
                              long_mode: DOT
                              y: 3
                              align: CENTER
                              text_color: color_misty_blue
                              text_font: nunito_16
                              text: "Artist"
                          - slider:
                              id: media_player_duration_pos_slider
                              radius: 2
                              y: 35
                              bg_color: color_steel_blue
                              align: center
                              width: 260
                              height: 5
                              min_value: 0
                              max_value: 100
                              indicator:
                                bg_color: color_misty_blue
                                radius: 2
                              knob:
                                bg_opa: transp
                              on_press:
                                - lambda: |-
                                    id(duration_slider_user_interaction) = true;
                              on_release:
                                - lambda: |-
                                    id(slider_position) = x;
                                - script.execute: handle_duration_slider_release_script

              - obj:
                  width: 140
                  height: 140
                  align: left_mid
                  bg_opa: transp
                  border_color: color_slate_blue_gray
                  border_width: 10
                  shadow_opa: transp
                  radius: 20

        # PRIMARY BUTTONS
        - obj:
            id: media_player_primary_controls_background
            y: 230
            width: 440
            height: 100
            align: top_mid
            clickable: false
            scrollable: false
            radius: 20
            pad_all: 0
            bg_color: color_slate_blue_gray
            border_opa: transp
            border_width: 0
            shadow_opa: transp
            widgets:
              - obj:
                  width: 440
                  height: 100
                  align: center
                  clickable: false
                  scrollable: false
                  radius: 20
                  pad_all: 0
                  bg_opa: transp
                  border_opa: transp
                  border_width: 0
                  shadow_opa: transp
                  widgets:
                    # PREVIOUS BUTTON
                    - obj:
                        id: media_player_prev_btn
                        x: 30
                        width: 90
                        height: 90
                        align: left_mid
                        pad_all: 0
                        bg_opa: transp
                        shadow_opa: transp
                        border_opa: transp
                        widgets:
                          - button:
                              width: 70
                              height: 70
                              align: center
                              clickable: true
                              radius: 50
                              pad_all: 0
                              bg_opa: transp
                              border_opa: transp
                              border_width: 0
                              shadow_width: 8
                              shadow_spread: 2
                              shadow_ofs_y: 0
                              shadow_color: color_black
                              shadow_opa: cover
                              pressed:
                                bg_color: color_steel_blue
                                shadow_width: 4
                              on_press:
                                - homeassistant.action:
                                    action: media_player.media_previous_track
                                    data:
                                      entity_id: "${media_player_entity}"

                          - obj:
                              width: 60
                              height: 60
                              align: center
                              clickable: false
                              radius: 45
                              pad_all: 0
                              bg_opa: transp 
                              border_opa: transp
                              shadow_width: 4
                              shadow_color: 0xFFFFFF
                              shadow_ofs_x: -4
                              shadow_ofs_y: -2
                              shadow_opa: 30%

                          - obj:
                              width: 65
                              height: 65
                              pad_all: 0
                              align: center
                              clickable: false
                              radius: 50
                              border_opa: transp
                              bg_color: color_slate_blue_gray
                              widgets:
                                - label:
                                    align: center
                                    text_font: mdi_icons_40
                                    text_color: color_misty_blue
                                    text: "${previous_track_icon}"

                    # NEXT BUTTON
                    - obj:
                        id: media_player_next_btn
                        x: -30
                        width: 90
                        height: 90
                        align: right_mid
                        pad_all: 0
                        bg_opa: transp
                        shadow_opa: transp
                        border_opa: transp
                        widgets:
                          - button:
                              width: 70
                              height: 70
                              align: center
                              clickable: true
                              radius: 50
                              pad_all: 0
                              bg_opa: transp
                              border_opa: transp
                              border_width: 0
                              shadow_width: 8
                              shadow_spread: 2
                              shadow_ofs_y: 0
                              shadow_color: color_black
                              shadow_opa: cover
                              pressed:
                                bg_color: color_steel_blue
                                shadow_width: 4
                              on_press:
                                - homeassistant.action:
                                    action: media_player.media_next_track
                                    data:
                                      entity_id: "${media_player_entity}"

                          - obj:
                              width: 60
                              height: 60
                              align: center
                              clickable: false
                              radius: 45
                              pad_all: 0
                              bg_opa: transp 
                              border_opa: transp
                              shadow_width: 4
                              shadow_color: 0xFFFFFF
                              shadow_ofs_x: -4
                              shadow_ofs_y: -2
                              shadow_opa: 30%

                          - obj:
                              width: 65
                              height: 65
                              pad_all: 0
                              align: center
                              clickable: false
                              radius: 50
                              border_opa: transp
                              bg_color: color_slate_blue_gray
                              widgets:
                                - label:
                                    align: center
                                    text_font: mdi_icons_40
                                    text_color: color_misty_blue
                                    text: "${next_track_icon}"

        # SECONDARY BUTTONS
        - obj:
            x: 0
            y: -60
            width: 440
            height: 80
            pad_all: 0
            align: bottom_mid
            bg_color: color_slate_blue_gray
            shadow_opa: transp
            border_opa: transp
            border_width: 0
            radius: 20
            widgets:
              - obj:
                  id: media_player_secondary_controls_background
                  width: 440
                  height: 80
                  pad_all: 0
                  align: center
                  bg_opa: transp
                  shadow_opa: transp
                  border_opa: transp
                  border_width: 0
                  radius: 20
                  widgets:
                    # off
                    - obj:
                        id: media_player_off_btn
                        x: 20
                        align: left_mid
                        width: 46
                        height: 46
                        pad_all: 0
                        radius: 30
                        bg_opa: transp
                        border_opa: transp
                        shadow_width: 5
                        shadow_spread: 1
                        shadow_color: color_black
                        pressed:
                          bg_color: color_black
                          shadow_width: 4
                        widgets:
                          - label:
                              align: center
                              text_color: color_misty_blue
                              text_font: mdi_icons_28
                              text: "${power_icon}"
                              on_press:
                                - homeassistant.action:
                                    action: media_player.turn_off
                                    data:
                                      entity_id: "${media_player_entity}"
                    # repeat
                    - obj:
                        id: media_player_repeat_btn
                        x: 80
                        align: left_mid
                        width: 46
                        height: 46
                        pad_all: 0
                        radius: 30
                        bg_opa: transp
                        border_opa: transp
                        shadow_width: 5
                        shadow_spread: 1
                        shadow_color: color_black
                        pressed:
                          bg_color: color_black
                          shadow_width: 4
                        widgets:
                          - label:
                              id: media_player_repeat_label
                              align: center
                              text_color: color_misty_blue
                              text_font: mdi_icons_28
                              text: "${repeat_all_icon}"
                              on_press:
                                - script.execute: handle_repeat_press_script
                    
                    # source
                    - obj:
                        id: media_player_source_btn
                        x: 140
                        align: left_mid
                        width: 46
                        height: 46
                        pad_all: 0
                        radius: 30
                        bg_opa: transp
                        border_opa: transp
                        shadow_width: 5
                        shadow_spread: 1
                        shadow_color: color_black
                        pressed:
                          bg_color: color_black
                          shadow_width: 4
                        widgets:
                          - label:
                              id: media_player_source_label
                              align: center
                              text_color: color_misty_blue
                              text_font: mdi_icons_28
                              text: "${media_source}"
                        on_click:
                          - lambda: |-
                              // Проверяем доступность источников
                              if (!id(source_available)) return;
                              if (id(is_animating)) return;
                              id(is_animating) = true;
                          - script.execute: animate_mp_to_source

                    # mute
                    - obj:
                        id: media_player_mute_btn
                        x: -140
                        align: right_mid
                        width: 46
                        height: 46
                        pad_all: 0
                        radius: 30
                        bg_opa: transp
                        border_opa: transp
                        shadow_width: 5
                        shadow_spread: 1
                        shadow_color: color_black
                        pressed:
                          bg_color: color_black
                          shadow_width: 4
                        widgets:
                          - label:
                              id: media_player_mute_label
                              align: center
                              text_color: color_misty_blue
                              text_font: mdi_icons_28
                              text: "${volume_on_icon}"
                              on_press:
                                - if:
                                    condition:
                                      lambda: 'return id(media_player_is_volume_muted).state;'
                                    then:
                                      - homeassistant.action:
                                          action: media_player.volume_mute
                                          data:
                                            entity_id: "${media_player_entity}"
                                            is_volume_muted: "false"
                                    else:
                                      - homeassistant.action:
                                          action: media_player.volume_mute
                                          data:
                                            entity_id: "${media_player_entity}"
                                            is_volume_muted: "true"

                    # volume -
                    - obj:
                        id: media_player_vol_minus_btn
                        x: -80
                        align: right_mid
                        width: 46
                        height: 46
                        pad_all: 0
                        radius: 30
                        bg_opa: transp
                        border_opa: transp
                        shadow_width: 5
                        shadow_spread: 1
                        shadow_color: color_black
                        pressed:
                          bg_color: color_black
                          shadow_width: 4
                        widgets:
                          - label:
                              id: media_player_vol_down_label
                              align: center
                              text_color: color_misty_blue
                              text_font: mdi_icons_28
                              text: "${volume_minus_icon}"
                              on_press:
                                - homeassistant.action:
                                    action: media_player.volume_down
                                    data:
                                      entity_id: "${media_player_entity}"


                    # volume +
                    - obj:
                        id: media_player_vol_plus_btn
                        x: -20
                        align: right_mid
                        width: 46
                        height: 46
                        pad_all: 0
                        radius: 30
                        bg_opa: transp
                        border_opa: transp
                        shadow_width: 5
                        shadow_spread: 1
                        shadow_color: color_black
                        pressed:
                          bg_color: color_black
                          shadow_width: 4
                        widgets:
                          - label:
                              id: media_player_vol_up_label
                              align: center
                              text_color: color_misty_blue
                              text_font: mdi_icons_28
                              text: "${volume_plus_icon}"
                              on_press:
                                - homeassistant.action:
                                    action: media_player.volume_up
                                    data:
                                      entity_id: "${media_player_entity}"
                    

        # CIRCLE
        - obj:
            id: media_player_circle_background
            y: 40
            width: 150
            height: 150
            align: center
            clickable: false
            radius: 75
            pad_all: 0
            bg_color: color_black
            border_opa: transp
            border_width: 0
            shadow_opa: transp
            widgets:
              - obj:
                  width: 100
                  height: 100
                  pad_all: 0
                  align: center
                  clickable: false
                  radius: 50
                  border_opa: transp
                  bg_color: color_slate_blue_gray


              - obj:
                  width: 150
                  height: 150
                  align: center
                  clickable: false
                  radius: 75
                  pad_all: 0
                  bg_opa: transp
                  border_opa: transp
                  border_width: 0
                  shadow_opa: transp
                  widgets:
                    - arc:
                        id: media_player_volume_arc
                        clickable: false
                        adjustable: false
                        adv_hittest: false
                        align: center
                        width: 130
                        height: 130
                        min_value: 0
                        max_value: 100
                        start_angle: 0
                        end_angle: 360
                        rotation: 90
                        arc_width: 5
                        arc_color: color_steel_blue
                        arc_rounded: false
                        indicator:
                          arc_width: 5
                          arc_color: color_green

                    - obj:
                        width: 100
                        height: 100
                        pad_all: 0
                        align: center
                        clickable: false
                        radius: 50
                        border_opa: transp
                        bg_opa: transp
                        widgets:
                          - label:
                              id: media_player_state_label
                              align: CENTER
                              text_color: color_misty_blue
                              text_font: mdi_icons_52
                              text: "${play_icon}"
                              on_press:
                                - if:
                                    condition:
                                      lambda: 'return id(media_player_state_sensor).state == "playing";'
                                    then:
                                      - homeassistant.action:
                                          action: media_player.media_pause
                                          data:
                                            entity_id: "${media_player_entity}"
                                    else:
                                      - homeassistant.action:
                                          action: media_player.media_play
                                          data:
                                            entity_id: "${media_player_entity}"

        - obj:
            id: media_player_source_panel
            hidden: true
            width: 440
            height: 360
            align: center
            pad_all: 0
            bg_color: color_slate_blue_gray
            border_opa: transp
            border_width: 0
            shadow_opa: transp
            radius: 20
            layout:
              type: flex
              flex_flow: column
              flex_align_main: center
              flex_align_cross: center
              flex_align_track: center

        # back
        - obj:
            y: 0
            width: 80
            height: 70
            align: bottom_mid
            bg_opa: transp
            pad_all: 0
            border_opa: transp
            border_width: 0
            shadow_opa: transp
            radius: 0
            widgets:
              - obj:
                  y: -20
                  width: 80
                  height: 5
                  align: bottom_mid
                  bg_color: color_steel_blue
                  pad_all: 0
                  border_opa: transp
                  border_width: 0
                  shadow_opa: transp
                  radius: 15 
            on_click:
              - lvgl.page.show: home_page

script:
  - id: update_cover_script
    mode: restart
    then:
      - lambda: |-
          std::string url = id(pending_cover_url);
          id(cover_url) = url;
      - homeassistant.action:
          action: display_tools.save_media_cover
          data:
            entity_id: "${media_player_entity}"
            size: small
      - delay: 1s
      - online_image.release: media_image_jpeg
      - online_image.set_url:
          id: media_image_jpeg
          url: "${ha_server}/local/display_tools/cover.jpeg"

  - id: update_repeat_mode_script
    mode: restart
    then:
      - lambda: |-
          std::string x = id(pending_repeat_value);
          auto modes = id(repeat_modes);
          auto icons = id(repeat_icons);
          for (int i = 0; i < modes.size(); i++) {
            if (modes[i] == x) {
              id(current_repeat_mode_idx) = i;
              id(tmp_repeat_mode) = modes[i];
              id(tmp_repeat_icon) = icons[i];
              break;
            }
          }
      - lvgl.label.update:
          id: media_player_repeat_label
          text: !lambda 'return id(tmp_repeat_icon);'

  - id: handle_repeat_press_script
    mode: restart
    then:
      - lambda: |-
          int idx = id(current_repeat_mode_idx);
          auto modes = id(repeat_modes);
          auto icons = id(repeat_icons);
          idx = (idx + 1) % modes.size();
          id(current_repeat_mode_idx) = idx;
          std::string new_mode = modes[idx];
          std::string new_icon = icons[idx];
          id(tmp_repeat_mode) = new_mode;
          id(tmp_repeat_icon) = new_icon;
      - lvgl.label.update:
          id: media_player_repeat_label
          text: !lambda 'return id(tmp_repeat_icon);'
      - homeassistant.action:
          action: media_player.repeat_set
          data:
            entity_id: "${media_player_entity}"
            repeat: !lambda 'return id(tmp_repeat_mode);'

  - id: handle_duration_slider_release_script
    mode: restart
    then:
      - homeassistant.action:
          action: media_player.media_seek
          data:
            entity_id: "${media_player_entity}"
            seek_position: !lambda 'return std::to_string(int(id(slider_position)));'
      - delay: 2s
      - lambda: |-
          id(duration_slider_user_interaction) = false;


  - id: media_player_build_source_panel
    then:
      - lambda: |-
          static esphome::lvgl::FontEngine fe_nunito_16(id(nunito_16));

          lv_obj_t * cont = id(media_player_source_panel);
          if (!cont) return;

          while (lv_obj_get_child_cnt(cont) > 0) {
            lv_obj_t * child = lv_obj_get_child(cont, 0);
            lv_obj_del(child);
          }

          auto & list = id(source_list);
          int sel = id(source_list_index);

          const lv_color_t COLOR_DEFAULT = lv_color_hex(0x9BA2BC);
          const lv_color_t COLOR_ACTIVE  = lv_color_hex(0x2ECC71);

          for (int i = 0; i < (int)list.size(); ++i) {
            lv_obj_t * btn = lv_obj_create(cont);
            lv_obj_set_size(btn, 120, 30);
            lv_obj_add_flag(btn, LV_OBJ_FLAG_CLICKABLE);
            lv_obj_clear_flag(btn, LV_OBJ_FLAG_SCROLLABLE);
            lv_obj_set_style_bg_opa(btn, LV_OPA_TRANSP, 0);
            lv_obj_set_style_border_width(btn, 0, 0);
            lv_obj_set_style_pad_left(btn, 10, 0);
            lv_obj_set_style_pad_top(btn, 10, 0);
            lv_obj_set_style_pad_bottom(btn, 10, 0);
            lv_obj_set_style_pad_column(btn, 10, 0);

            lv_obj_set_flex_flow(btn, LV_FLEX_FLOW_ROW);
            lv_obj_set_flex_align(btn,
                                  LV_FLEX_ALIGN_START,
                                  LV_FLEX_ALIGN_CENTER,
                                  LV_FLEX_ALIGN_CENTER);

            lv_obj_t * txt = lv_label_create(btn);
            std::string caption = list[i];
            if (!caption.empty())
              caption[0] = (char)std::toupper((unsigned char)caption[0]);
            lv_label_set_text(txt, caption.c_str());
            lv_obj_set_style_text_font(txt, fe_nunito_16.get_lv_font(), 0);

            lv_color_t c = (i == sel) ? COLOR_ACTIVE : COLOR_DEFAULT;
            lv_obj_set_style_text_color(txt, c, 0);

            lv_obj_add_event_cb(btn, [](lv_event_t * e){
              int idx = (int)(intptr_t) lv_event_get_user_data(e);
              auto & list = id(source_list);
              if (idx < 0 || idx >= (int)list.size()) return;

              id(source_list_index) = idx;
              id(media_player_send_source_to_ha).execute();

              lv_obj_t * parent = id(media_player_source_panel);
              if (parent) {
                int child_cnt = lv_obj_get_child_cnt(parent);
                for (int j = 0; j < child_cnt; ++j) {
                  lv_obj_t * b = lv_obj_get_child(parent, j);
                  if (lv_obj_get_child_cnt(b) >= 1) {
                    lv_obj_t * label = lv_obj_get_child(b, 0);
                    lv_color_t c = (j == idx) ? lv_color_hex(0x2ECC71) : lv_color_hex(0x9BA2BC);
                    lv_obj_set_style_text_color(label, c, 0);
                    lv_obj_set_style_bg_opa(b, LV_OPA_TRANSP, 0);
                  }
                }
              }

              if (!id(is_animating)) {
                id(is_animating) = true;
                id(animate_source_to_mp).execute();
              }
            }, LV_EVENT_CLICKED, (void*)(intptr_t)i);
          }


  - id: media_player_send_source_to_ha
    then:
      - homeassistant.action:
          action: media_player.select_source
          data:
            entity_id: "${media_player_entity}"
            source: !lambda |-
              auto & list = id(source_list);
              int idx = id(source_list_index);
              if (idx >= 0 && idx < (int)list.size()) return list[idx];
              return std::string("");



  # MAIN -> SOURCE
  - id: animate_mp_to_source
    then:
      - lambda: |-
          // ШАГ 1: Кнопки уезжают, круг вниз, виджет исчезает
          lv_anim_t anim_prev_btn, anim_next_btn, anim_circle, anim_main_fade, anim_secondary_btns_fade;
          
          lv_anim_init(&anim_prev_btn);
          lv_anim_set_var(&anim_prev_btn, id(media_player_prev_btn));
          lv_anim_set_values(&anim_prev_btn, 30, -150);
          lv_anim_set_time(&anim_prev_btn, 600);
          lv_anim_set_exec_cb(&anim_prev_btn, [](void * var, int32_t v) {
            lv_obj_set_x((lv_obj_t*)var, v);
          });
          lv_anim_set_path_cb(&anim_prev_btn, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_prev_btn);
          
          lv_anim_init(&anim_next_btn);
          lv_anim_set_var(&anim_next_btn, id(media_player_next_btn));
          lv_anim_set_values(&anim_next_btn, -30, 150);
          lv_anim_set_time(&anim_next_btn, 600);
          lv_anim_set_exec_cb(&anim_next_btn, [](void * var, int32_t v) {
            lv_obj_set_x((lv_obj_t*)var, v);
          });
          lv_anim_set_path_cb(&anim_next_btn, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_next_btn);
          
          lv_anim_init(&anim_circle);
          lv_anim_set_var(&anim_circle, id(media_player_circle_background));
          lv_anim_set_values(&anim_circle, 40, 400);
          lv_anim_set_time(&anim_circle, 600);
          lv_anim_set_exec_cb(&anim_circle, [](void * var, int32_t v) {
            lv_obj_set_y((lv_obj_t*)var, v);
          });
          lv_anim_set_path_cb(&anim_circle, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_circle);
          
          lv_anim_init(&anim_main_fade);
          lv_anim_set_var(&anim_main_fade, id(media_widget_background));
          lv_anim_set_values(&anim_main_fade, 255, 0);
          lv_anim_set_time(&anim_main_fade, 600);
          lv_anim_set_exec_cb(&anim_main_fade, [](void * var, int32_t v) {
            lv_obj_set_style_opa((lv_obj_t*)var, v, 0);
          });
          lv_anim_set_path_cb(&anim_main_fade, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_main_fade);

          // lv_anim_init(&anim_secondary_btns_fade);
          // lv_anim_set_var(&anim_secondary_btns_fade, id(media_player_secondary_controls_background));
          // lv_anim_set_values(&anim_secondary_btns_fade, 255, 0);
          // lv_anim_set_time(&anim_secondary_btns_fade, 600);
          // lv_anim_set_exec_cb(&anim_secondary_btns_fade, [](void * var, int32_t v) {
          //   lv_obj_set_style_opa((lv_obj_t*)var, v, 0);
          // });
          // lv_anim_set_path_cb(&anim_secondary_btns_fade, lv_anim_path_ease_in_out);
          // lv_anim_start(&anim_secondary_btns_fade);

      - delay: 600ms
      
      - lambda: |-
          // ШАГ 2: Средняя панель расширяется и поднимается + радиус -> 0
          lv_anim_t anim_middle_expand, anim_middle_move_up, anim_radius;
          
          lv_anim_init(&anim_middle_expand);
          lv_anim_set_var(&anim_middle_expand, id(media_player_primary_controls_background));
          lv_anim_set_values(&anim_middle_expand, 100, 160);
          lv_anim_set_time(&anim_middle_expand, 350);
          lv_anim_set_exec_cb(&anim_middle_expand, [](void * var, int32_t v) {
            lv_obj_set_height((lv_obj_t*)var, v);
          });
          lv_anim_set_path_cb(&anim_middle_expand, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_middle_expand);
          
          lv_anim_init(&anim_middle_move_up);
          lv_anim_set_var(&anim_middle_move_up, id(media_player_primary_controls_background));
          lv_anim_set_values(&anim_middle_move_up, 230, 200);
          lv_anim_set_time(&anim_middle_move_up, 350);
          lv_anim_set_exec_cb(&anim_middle_move_up, [](void * var, int32_t v) {
            lv_obj_set_y((lv_obj_t*)var, v);
          });
          lv_anim_set_path_cb(&anim_middle_move_up, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_middle_move_up);
          
          // ✅ АНИМАЦИЯ РАДИУСА (20 -> 0)
          lv_anim_init(&anim_radius);
          lv_anim_set_var(&anim_radius, id(media_player_primary_controls_background));
          lv_anim_set_values(&anim_radius, 20, 0);
          lv_anim_set_time(&anim_radius, 350);
          lv_anim_set_exec_cb(&anim_radius, [](void * var, int32_t v) {
            lv_obj_set_style_radius((lv_obj_t*)var, v, 0);
          });
          lv_anim_set_path_cb(&anim_radius, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_radius);

      - delay: 350ms
      
      - lambda: |-
          // ШАГ 3: Показываем панель источников
          lv_obj_clear_flag(id(media_player_source_panel), LV_OBJ_FLAG_HIDDEN);
          lv_obj_set_style_opa(id(media_player_source_panel), 0, 0);
          
          lv_anim_t anim_source_panel_fade;
          
          lv_anim_init(&anim_source_panel_fade);
          lv_anim_set_var(&anim_source_panel_fade, id(media_player_source_panel));
          lv_anim_set_values(&anim_source_panel_fade, 0, 255);
          lv_anim_set_time(&anim_source_panel_fade, 400);
          lv_anim_set_exec_cb(&anim_source_panel_fade, [](void * var, int32_t v) {
            lv_obj_set_style_opa((lv_obj_t*)var, v, 0);
          });
          lv_anim_set_path_cb(&anim_source_panel_fade, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_source_panel_fade);

      - delay: 400ms
      
      - lambda: |-
          id(is_animating) = false;


  # SOURCE -> MAIN
  - id: animate_source_to_mp
    then:
      - lambda: |-
          id(is_animating) = true;
          
          // ШАГ 1: Скрываем панель источников
          lv_anim_t anim_source_panel_fade;
          
          lv_anim_init(&anim_source_panel_fade);
          lv_anim_set_var(&anim_source_panel_fade, id(media_player_source_panel));
          lv_anim_set_values(&anim_source_panel_fade, 255, 0);
          lv_anim_set_time(&anim_source_panel_fade, 400);
          lv_anim_set_exec_cb(&anim_source_panel_fade, [](void * var, int32_t v) {
            lv_obj_set_style_opa((lv_obj_t*)var, v, 0);
          });
          lv_anim_set_path_cb(&anim_source_panel_fade, lv_anim_path_ease_in_out);
          lv_anim_set_ready_cb(&anim_source_panel_fade, [](lv_anim_t * a) {
            lv_obj_add_flag(id(media_player_source_panel), LV_OBJ_FLAG_HIDDEN);
          });
          lv_anim_start(&anim_source_panel_fade);

      - delay: 400ms
      
      - lambda: |-
          // ШАГ 2: Средняя панель сжимается и опускается + радиус -> 20
          lv_anim_t anim_middle_shrink, anim_middle_move_down, anim_radius;
          
          lv_anim_init(&anim_middle_shrink);
          lv_anim_set_var(&anim_middle_shrink, id(media_player_primary_controls_background));
          lv_anim_set_values(&anim_middle_shrink, 160, 100);
          lv_anim_set_time(&anim_middle_shrink, 350);
          lv_anim_set_exec_cb(&anim_middle_shrink, [](void * var, int32_t v) {
            lv_obj_set_height((lv_obj_t*)var, v);
          });
          lv_anim_set_path_cb(&anim_middle_shrink, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_middle_shrink);
          
          lv_anim_init(&anim_middle_move_down);
          lv_anim_set_var(&anim_middle_move_down, id(media_player_primary_controls_background));
          lv_anim_set_values(&anim_middle_move_down, 200, 230);
          lv_anim_set_time(&anim_middle_move_down, 350);
          lv_anim_set_exec_cb(&anim_middle_move_down, [](void * var, int32_t v) {
            lv_obj_set_y((lv_obj_t*)var, v);
          });
          lv_anim_set_path_cb(&anim_middle_move_down, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_middle_move_down);
          
          // ✅ АНИМАЦИЯ РАДИУСА (0 -> 20)
          lv_anim_init(&anim_radius);
          lv_anim_set_var(&anim_radius, id(media_player_primary_controls_background));
          lv_anim_set_values(&anim_radius, 0, 20);
          lv_anim_set_time(&anim_radius, 350);
          lv_anim_set_exec_cb(&anim_radius, [](void * var, int32_t v) {
            lv_obj_set_style_radius((lv_obj_t*)var, v, 0);
          });
          lv_anim_set_path_cb(&anim_radius, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_radius);

      - delay: 350ms
      
      - lambda: |-
          // ШАГ 3: Кнопки возвращаются, круг вверх, виджет появляется
          lv_anim_t anim_prev_btn, anim_next_btn, anim_circle, anim_main_fade, anim_secondary_btns_fade;
          
          lv_anim_init(&anim_prev_btn);
          lv_anim_set_var(&anim_prev_btn, id(media_player_prev_btn));
          lv_anim_set_values(&anim_prev_btn, -150, 30);
          lv_anim_set_time(&anim_prev_btn, 600);
          lv_anim_set_exec_cb(&anim_prev_btn, [](void * var, int32_t v) {
            lv_obj_set_x((lv_obj_t*)var, v);
          });
          lv_anim_set_path_cb(&anim_prev_btn, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_prev_btn);
          
          lv_anim_init(&anim_next_btn);
          lv_anim_set_var(&anim_next_btn, id(media_player_next_btn));
          lv_anim_set_values(&anim_next_btn, 150, -30);
          lv_anim_set_time(&anim_next_btn, 600);
          lv_anim_set_exec_cb(&anim_next_btn, [](void * var, int32_t v) {
            lv_obj_set_x((lv_obj_t*)var, v);
          });
          lv_anim_set_path_cb(&anim_next_btn, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_next_btn);
          
          lv_anim_init(&anim_circle);
          lv_anim_set_var(&anim_circle, id(media_player_circle_background));
          lv_anim_set_values(&anim_circle, 400, 40);
          lv_anim_set_time(&anim_circle, 600);
          lv_anim_set_exec_cb(&anim_circle, [](void * var, int32_t v) {
            lv_obj_set_y((lv_obj_t*)var, v);
          });
          lv_anim_set_path_cb(&anim_circle, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_circle);
          
          lv_anim_init(&anim_main_fade);
          lv_anim_set_var(&anim_main_fade, id(media_widget_background));
          lv_anim_set_values(&anim_main_fade, 0, 255);
          lv_anim_set_time(&anim_main_fade, 600);
          lv_anim_set_exec_cb(&anim_main_fade, [](void * var, int32_t v) {
            lv_obj_set_style_opa((lv_obj_t*)var, v, 0);
          });
          lv_anim_set_path_cb(&anim_main_fade, lv_anim_path_ease_in_out);
          lv_anim_start(&anim_main_fade);

          // lv_anim_init(&anim_secondary_btns_fade);
          // lv_anim_set_var(&anim_secondary_btns_fade, id(media_player_secondary_controls_background));
          // lv_anim_set_values(&anim_secondary_btns_fade, 0, 255);
          // lv_anim_set_time(&anim_secondary_btns_fade, 600);
          // lv_anim_set_exec_cb(&anim_secondary_btns_fade, [](void * var, int32_t v) {
          //   lv_obj_set_style_opa((lv_obj_t*)var, v, 0);
          // });
          // lv_anim_set_path_cb(&anim_secondary_btns_fade, lv_anim_path_ease_in_out);
          // lv_anim_start(&anim_secondary_btns_fade);

      - delay: 600ms
      
      - lambda: |-
          id(is_animating) = false;

